@page "/cars/create"

@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<BlazorAppCar.Data.BlazorAppCarContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h4>Car</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Car" OnValidSubmit="AddCar" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label> 
                <InputText id="name" @bind-Value="Car.Name" class="form-control" /> 
                <ValidationMessage For="() => Car.Name" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="engineid" class="form-label">EngineId:</label> 
                <InputNumber id="engineid" @bind-Value="Car.EngineId" class="form-control" /> 
                <ValidationMessage For="() => Car.EngineId" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/cars">Back to List</a>
</div>

@code {

    [SupplyParameterFromForm]
    public Car Car { get; set; } = new();

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddCar()
    {
        using var context = DbFactory.CreateDbContext();
        context.Car.Add(Car);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/cars");
    }
}
