@page "/Engines/edit"

@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<BlazorAppCar.Data.BlazorAppCarContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Engine</h4>
<hr />
@if (Engine is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Engine" OnValidSubmit="UpdateEngine" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Engine.Id" value="@Engine.Id" />
                <div class="mb-3">
                    <label for="hp" class="form-label">HP:</label>
                    <InputNumber id="hp" @bind-Value="Engine.HP" class="form-control" />
                    <ValidationMessage For="() => Engine.HP" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="rpmmax" class="form-label">RpmMax:</label>
                    <InputNumber id="rpmmax" @bind-Value="Engine.RpmMax" class="form-control" />
                    <ValidationMessage For="() => Engine.RpmMax" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/engines">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Engine? Engine { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Engine ??= await context.Engine.FirstOrDefaultAsync(m => m.Id == Id);

        if (Engine is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateEngine()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Engine!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!EngineExists(Engine!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/engines");
    }

    bool EngineExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Engine.Any(e => e.Id == id);
    }
}
